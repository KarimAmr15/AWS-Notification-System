AWSTemplateFormatVersion: '2010-09-09'
Resources:

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderDLQ

  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderDLQ.Arn
        maxReceiveCount: 3

  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic

  QueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref OrderTopic
      Protocol: sqs
      Endpoint: !GetAtt OrderQueue.Arn
      RawMessageDelivery: true

  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrderQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSNSToSendMessage
            Effect: Allow
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt OrderQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref OrderTopic

  OrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: OrderLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  OrderLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderProcessor
      Runtime: python3.10
      Role: !GetAtt OrderLambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('Orders')
          def lambda_handler(event, context):
              for record in event['Records']:
                  message = json.loads(record['body'])
                  table.put_item(Item=message)
                  print("Saved:", message['orderId'])

  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt OrderQueue.Arn
      FunctionName: !Ref OrderLambdaFunction
      BatchSize: 1
      Enabled: true
